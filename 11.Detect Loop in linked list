/*Given the head of a singly linked list, the task is to check if the linked list has a loop. A loop means that the last node of the linked list is connected back to a node in the same list.  So if the next of the last node is null. then there is no loop.

Note: You need to return a boolean value true if there is a loop, otherwise false.

The following is an internal representation of every test case (three inputs).
A LinkedList and a pos (1-based index)-Position of the node to which the last node links back if there is a loop. If the linked list does not have any loop, then pos = 0.

Examples:

Input: LinkedList: 1->3->4, pos = 2
Output: true
*/

class Solution {
    // Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head) {
        // Add code here
         if(head==null) return false;
          if(head==null) return false;
          
           Node slow=head;
        Node fast=head.next;
        
            while(fast!=null && fast.next!=null){
            if(fast==slow) return true;
            slow=slow.next;
            fast=fast.next.next;
        }
        return false;
    }
}
