
/*Given an array arr[] that contains n integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Note: It is guarenteed that the output fits in 64-bit integer.

Examples

Input: arr[] = {6, -3, -10, 0, 2}, n = 5
Output: 180
Explanation:  The subarray [6, -3, -10] gives max product as 180.
Input: arr[] = {2, 3, 4, 5, -1, 0}, n = 6
Output: 120
Explanation: The subarray [2, 3, 4, 5] gives max product as 120.
Input: arr[] = {2, 3, 4}, n = 3
Output: 24
Explanation: For an array with all positive elements, the result is product of all elements.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ n ≤ 500
-102 ≤ arr[i] ≤ 102
*/


class Solution {
    // Function to find maximum product subarray
    long maxProduct(int[] arr, int n) {
        // code here

       long leftProd = 1;
        long rightProd = 1;
      long maxP = Integer.MIN_VALUE;
        
        for (int i = 0; i < n; i++) {
            if (leftProd == 0) leftProd = 1;
            if (rightProd == 0) rightProd = 1;
            leftProd *= arr[i];
            rightProd *= arr[n - i - 1];
            maxP = Math.max(maxP, Math.max(rightProd,leftProd));
        }
        
        return maxP;
    }

}
