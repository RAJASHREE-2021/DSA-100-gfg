/*
Kadane's Algorithm
Difficulty: MediumAccuracy: 36.28%Submissions: 957K+Points: 4
Given an integer array arr[]. Find the contiguous sub-array(containing at least one number) that has the maximum sum and return its sum.

Examples:

Input: arr[] = [1, 2, 3, -2, 5]
Output: 9
Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.
Input: arr[] = [-1, -2, -3, -4]
Output: -1
Explanation: Max subarray sum is -1 of element (-1)
Input: arr[] = [5, 4, 7]
Output: 16
Explanation: Max subarray sum is 16 of element (5, 4, 7)
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size() ≤ 105
-107 ≤ arr[i] ≤ 107

*/


class Solution {

    // Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int[] arr) {
        // Initialize the variables
        long maxCurrent = arr[0];  // Max sum of subarray ending at current index
        long maxGlobal = arr[0];   // Global max sum
        
        // Traverse the array starting from the second element
        for (int i = 1; i < arr.length; i++) {
            // Either extend the current subarray or start a new one
            maxCurrent = Math.max(arr[i], maxCurrent + arr[i]);
            
            // Update the global maximum sum
            if (maxCurrent > maxGlobal) {
                maxGlobal = maxCurrent;
            }
        }
        
        return maxGlobal;
    }
}

